#define _STFTIterlyzer _C(CSVP_STFTIterlyzer, _, _T1)
#define _Wave _C(CDSP2_Wave, _, _T1)
#define _Spectrum _C(CDSP2_Spectrum, _, _T1)

RTFunc(int, CSVP_VOTFromWave, void* Sorc, int LBound, int RBound)
{
    _STFTIterlyzer Sublyzer;
    
    //Setup analysis window.
    void* OrigWind = ((_Wave*)Sorc) -> Window;
    void* OrigSize = ((_Wave*)Sorc) -> WinSize;
    _T1*  NewWind  = RCall(RAlloc, _T1)(SIZE_FFT);
    RCall(CDSP2_GenHanning, _T1)(NewWind, SIZE_FFT);
    RCall(_Wave, SetWindow)(Sorc, NewWind, SIZE_FFT);
    
    RCall(_STFTIterlyzer, CtorSize)(& Sublyzer, SIZE_FFT);
    RCall(_STFTIterlyzer, SetWave)(& Sublyzer, Sorc);
    RCall(_STFTIterlyzer, SetHopSize)(& Sublyzer, SIZE_HOP);
    RCall(_STFTIterlyzer, SetPosition)(& Sublyzer, LBound);
    
    RCall(_STFTIterlyzer, IterNextTo)(& Sublyzer, RBound);
    
    int i;
    int SampleRate = ((_Wave*)Sorc) -> SampleRate;
    int LBin = 300 * SIZE_FFT / SampleRate;
    int HBin = 1500 * SIZE_FFT / SampleRate;
    Array_Gtor(_T1, PowerList);
    Array_Gtor(_T1, PowerAcc);
    Array_Gtor(_T1, PowerAccR);
    
    int l = Sublyzer.SpecList.FrameNum;
    for(i = 0; i < l; i ++)
    {
        _T1 CurrPower;
        RCall(_Spectrum, MagnConv)(& Sublyzer.SpecList.Frames[i], CDSP2_dBMagn);
        CurrPower = RCall(CDSP2_VMaxElmt, _T1)(Sublyzer.SpecList.Frames[i].Magn,
            LBin, HBin);
        if(CurrPower < - 50.0) CurrPower = - 50.0;
        Array_Push(_T1, PowerList, CurrPower - 2.0);
    }
    _T1 MaxPower = RCall(CDSP2_VMaxElmt, _T1)(PowerList, 0,
        PowerList_Index + 1);
    _T1 Increment = POWER_STD - MaxPower;
    RCall(CDSP2_VCAdd, _T1)(PowerList, PowerList, Increment,
        PowerList_Index + 1);
    
    Array_Resize(_T1, PowerAcc, l);
    Array_Resize(_T1, PowerAccR, l);
    PowerAcc[0] = PowerList[0];
    PowerAccR[l - 1] = PowerList[l - 1];
    for(i = 1; i < l; i ++)
    {
        int j = l - 1 - i;
        PowerAcc[i] = PowerAcc[i - 1] + PowerList[i];
        PowerAccR[j] = PowerAccR[j + 1] + PowerList[j];
    }
    
    RCall(CDSP2_VSub, _T1)(PowerList, PowerAccR, PowerAcc, l);
    
    //TODO: Implement VMaxIndex, VMinIndex, VMaxEI, VMinEI in RFNL.
    int MaxIndex = 0;
    _T1 Max = PowerList[0];
    for(i = 1; i < l; i ++)
        if(PowerList[i] > Max)
        {
            Max = PowerList[i];
            MaxIndex = i;
        }
    
    //for(i = 0; i < l; i ++)
    //    printf("%f\n", PowerList[i]);
    
    int Ret = Sublyzer.PulseList.Frames[MaxIndex];
    
    Array_Dtor(_T1, PowerList);
    Array_Dtor(_T1, PowerAcc);
    Array_Dtor(_T1, PowerAccR);
    
    //Free and restore window.
    RFree(NewWind);
    RCall(_Wave, SetWindow)(Sorc, OrigWind, OrigSize);
    RCall(_STFTIterlyzer, Dtor)(& Sublyzer);
    
    return Ret;
}

RTFunc(int, CSVP_OnsetFromWave, void* Sorc, _T1 Threshold, int LBound,
    int RBound)
{
    int i;
    _T1* WPtr = RCall(_Wave, GetUnsafePtr)(Sorc);
    
    for(i = LBound; i < RBound; i ++)
    {
        if(WPtr[i] > Threshold)
            break;
    }
    if(i >= RBound) return - 1;
    
    return i;
}

#undef  _STFTIterlyzer
#undef  _Wave
#undef  _Spectrum

